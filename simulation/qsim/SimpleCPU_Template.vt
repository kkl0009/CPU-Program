// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/27/2020 16:02:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SimpleCPU_Template
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SimpleCPU_Template_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SimpleCPU_Template_vlg_check_tst (
	aOut,
	incrementOut,
	irOutput,
	marOut,
	mdriOutput,
	mdroOutput,
	pcOut,
	sampler_rx
);
input [7:0] aOut;
input  incrementOut;
input [7:0] irOutput;
input [7:0] marOut;
input [7:0] mdriOutput;
input [7:0] mdroOutput;
input [7:0] pcOut;
input sampler_rx;

reg [7:0] aOut_expected;
reg  incrementOut_expected;
reg [7:0] irOutput_expected;
reg [7:0] marOut_expected;
reg [7:0] mdriOutput_expected;
reg [7:0] mdroOutput_expected;
reg [7:0] pcOut_expected;

reg [7:0] aOut_prev;
reg  incrementOut_prev;
reg [7:0] irOutput_prev;
reg [7:0] marOut_prev;
reg [7:0] mdriOutput_prev;
reg [7:0] mdroOutput_prev;
reg [7:0] pcOut_prev;

reg [7:0] aOut_expected_prev;
reg  incrementOut_expected_prev;
reg [7:0] irOutput_expected_prev;
reg [7:0] marOut_expected_prev;
reg [7:0] mdriOutput_expected_prev;
reg [7:0] mdroOutput_expected_prev;
reg [7:0] pcOut_expected_prev;

reg [7:0] last_aOut_exp;
reg  last_incrementOut_exp;
reg [7:0] last_irOutput_exp;
reg [7:0] last_marOut_exp;
reg [7:0] last_mdriOutput_exp;
reg [7:0] last_mdroOutput_exp;
reg [7:0] last_pcOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	aOut_prev = aOut;
	incrementOut_prev = incrementOut;
	irOutput_prev = irOutput;
	marOut_prev = marOut;
	mdriOutput_prev = mdriOutput;
	mdroOutput_prev = mdroOutput;
	pcOut_prev = pcOut;
end

// update expected /o prevs

always @(trigger)
begin
	aOut_expected_prev = aOut_expected;
	incrementOut_expected_prev = incrementOut_expected;
	irOutput_expected_prev = irOutput_expected;
	marOut_expected_prev = marOut_expected;
	mdriOutput_expected_prev = mdriOutput_expected;
	mdroOutput_expected_prev = mdroOutput_expected;
	pcOut_expected_prev = pcOut_expected;
end



// expected incrementOut
initial
begin
	incrementOut_expected = 1'bX;
end 
// expected aOut[ 7 ]
initial
begin
	aOut_expected[7] = 1'bX;
end 
// expected aOut[ 6 ]
initial
begin
	aOut_expected[6] = 1'bX;
end 
// expected aOut[ 5 ]
initial
begin
	aOut_expected[5] = 1'bX;
end 
// expected aOut[ 4 ]
initial
begin
	aOut_expected[4] = 1'bX;
end 
// expected aOut[ 3 ]
initial
begin
	aOut_expected[3] = 1'bX;
end 
// expected aOut[ 2 ]
initial
begin
	aOut_expected[2] = 1'bX;
end 
// expected aOut[ 1 ]
initial
begin
	aOut_expected[1] = 1'bX;
end 
// expected aOut[ 0 ]
initial
begin
	aOut_expected[0] = 1'bX;
end 
// expected irOutput[ 7 ]
initial
begin
	irOutput_expected[7] = 1'bX;
end 
// expected irOutput[ 6 ]
initial
begin
	irOutput_expected[6] = 1'bX;
end 
// expected irOutput[ 5 ]
initial
begin
	irOutput_expected[5] = 1'bX;
end 
// expected irOutput[ 4 ]
initial
begin
	irOutput_expected[4] = 1'bX;
end 
// expected irOutput[ 3 ]
initial
begin
	irOutput_expected[3] = 1'bX;
end 
// expected irOutput[ 2 ]
initial
begin
	irOutput_expected[2] = 1'bX;
end 
// expected irOutput[ 1 ]
initial
begin
	irOutput_expected[1] = 1'bX;
end 
// expected irOutput[ 0 ]
initial
begin
	irOutput_expected[0] = 1'bX;
end 
// expected marOut[ 7 ]
initial
begin
	marOut_expected[7] = 1'bX;
end 
// expected marOut[ 6 ]
initial
begin
	marOut_expected[6] = 1'bX;
end 
// expected marOut[ 5 ]
initial
begin
	marOut_expected[5] = 1'bX;
end 
// expected marOut[ 4 ]
initial
begin
	marOut_expected[4] = 1'bX;
end 
// expected marOut[ 3 ]
initial
begin
	marOut_expected[3] = 1'bX;
end 
// expected marOut[ 2 ]
initial
begin
	marOut_expected[2] = 1'bX;
end 
// expected marOut[ 1 ]
initial
begin
	marOut_expected[1] = 1'bX;
end 
// expected marOut[ 0 ]
initial
begin
	marOut_expected[0] = 1'bX;
end 
// expected mdriOutput[ 7 ]
initial
begin
	mdriOutput_expected[7] = 1'bX;
end 
// expected mdriOutput[ 6 ]
initial
begin
	mdriOutput_expected[6] = 1'bX;
end 
// expected mdriOutput[ 5 ]
initial
begin
	mdriOutput_expected[5] = 1'bX;
end 
// expected mdriOutput[ 4 ]
initial
begin
	mdriOutput_expected[4] = 1'bX;
end 
// expected mdriOutput[ 3 ]
initial
begin
	mdriOutput_expected[3] = 1'bX;
end 
// expected mdriOutput[ 2 ]
initial
begin
	mdriOutput_expected[2] = 1'bX;
end 
// expected mdriOutput[ 1 ]
initial
begin
	mdriOutput_expected[1] = 1'bX;
end 
// expected mdriOutput[ 0 ]
initial
begin
	mdriOutput_expected[0] = 1'bX;
end 
// expected mdroOutput[ 7 ]
initial
begin
	mdroOutput_expected[7] = 1'bX;
end 
// expected mdroOutput[ 6 ]
initial
begin
	mdroOutput_expected[6] = 1'bX;
end 
// expected mdroOutput[ 5 ]
initial
begin
	mdroOutput_expected[5] = 1'bX;
end 
// expected mdroOutput[ 4 ]
initial
begin
	mdroOutput_expected[4] = 1'bX;
end 
// expected mdroOutput[ 3 ]
initial
begin
	mdroOutput_expected[3] = 1'bX;
end 
// expected mdroOutput[ 2 ]
initial
begin
	mdroOutput_expected[2] = 1'bX;
end 
// expected mdroOutput[ 1 ]
initial
begin
	mdroOutput_expected[1] = 1'bX;
end 
// expected mdroOutput[ 0 ]
initial
begin
	mdroOutput_expected[0] = 1'bX;
end 
// expected pcOut[ 7 ]
initial
begin
	pcOut_expected[7] = 1'bX;
end 
// expected pcOut[ 6 ]
initial
begin
	pcOut_expected[6] = 1'bX;
end 
// expected pcOut[ 5 ]
initial
begin
	pcOut_expected[5] = 1'bX;
end 
// expected pcOut[ 4 ]
initial
begin
	pcOut_expected[4] = 1'bX;
end 
// expected pcOut[ 3 ]
initial
begin
	pcOut_expected[3] = 1'bX;
end 
// expected pcOut[ 2 ]
initial
begin
	pcOut_expected[2] = 1'bX;
end 
// expected pcOut[ 1 ]
initial
begin
	pcOut_expected[1] = 1'bX;
end 
// expected pcOut[ 0 ]
initial
begin
	pcOut_expected[0] = 1'bX;
end 
// generate trigger
always @(aOut_expected or aOut or incrementOut_expected or incrementOut or irOutput_expected or irOutput or marOut_expected or marOut or mdriOutput_expected or mdriOutput or mdroOutput_expected or mdroOutput or pcOut_expected or pcOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aOut = %b | expected incrementOut = %b | expected irOutput = %b | expected marOut = %b | expected mdriOutput = %b | expected mdroOutput = %b | expected pcOut = %b | ",aOut_expected_prev,incrementOut_expected_prev,irOutput_expected_prev,marOut_expected_prev,mdriOutput_expected_prev,mdroOutput_expected_prev,pcOut_expected_prev);
	$display("| real aOut = %b | real incrementOut = %b | real irOutput = %b | real marOut = %b | real mdriOutput = %b | real mdroOutput = %b | real pcOut = %b | ",aOut_prev,incrementOut_prev,irOutput_prev,marOut_prev,mdriOutput_prev,mdroOutput_prev,pcOut_prev);
`endif
	if (
		( aOut_expected_prev[0] !== 1'bx ) && ( aOut_prev[0] !== aOut_expected_prev[0] )
		&& ((aOut_expected_prev[0] !== last_aOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aOut_expected_prev);
		$display ("     Real value = %b", aOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aOut_exp[0] = aOut_expected_prev[0];
	end
	if (
		( aOut_expected_prev[1] !== 1'bx ) && ( aOut_prev[1] !== aOut_expected_prev[1] )
		&& ((aOut_expected_prev[1] !== last_aOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aOut_expected_prev);
		$display ("     Real value = %b", aOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aOut_exp[1] = aOut_expected_prev[1];
	end
	if (
		( aOut_expected_prev[2] !== 1'bx ) && ( aOut_prev[2] !== aOut_expected_prev[2] )
		&& ((aOut_expected_prev[2] !== last_aOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aOut_expected_prev);
		$display ("     Real value = %b", aOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aOut_exp[2] = aOut_expected_prev[2];
	end
	if (
		( aOut_expected_prev[3] !== 1'bx ) && ( aOut_prev[3] !== aOut_expected_prev[3] )
		&& ((aOut_expected_prev[3] !== last_aOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aOut_expected_prev);
		$display ("     Real value = %b", aOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aOut_exp[3] = aOut_expected_prev[3];
	end
	if (
		( aOut_expected_prev[4] !== 1'bx ) && ( aOut_prev[4] !== aOut_expected_prev[4] )
		&& ((aOut_expected_prev[4] !== last_aOut_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aOut_expected_prev);
		$display ("     Real value = %b", aOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aOut_exp[4] = aOut_expected_prev[4];
	end
	if (
		( aOut_expected_prev[5] !== 1'bx ) && ( aOut_prev[5] !== aOut_expected_prev[5] )
		&& ((aOut_expected_prev[5] !== last_aOut_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aOut_expected_prev);
		$display ("     Real value = %b", aOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aOut_exp[5] = aOut_expected_prev[5];
	end
	if (
		( aOut_expected_prev[6] !== 1'bx ) && ( aOut_prev[6] !== aOut_expected_prev[6] )
		&& ((aOut_expected_prev[6] !== last_aOut_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aOut_expected_prev);
		$display ("     Real value = %b", aOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aOut_exp[6] = aOut_expected_prev[6];
	end
	if (
		( aOut_expected_prev[7] !== 1'bx ) && ( aOut_prev[7] !== aOut_expected_prev[7] )
		&& ((aOut_expected_prev[7] !== last_aOut_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aOut_expected_prev);
		$display ("     Real value = %b", aOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aOut_exp[7] = aOut_expected_prev[7];
	end
	if (
		( incrementOut_expected_prev !== 1'bx ) && ( incrementOut_prev !== incrementOut_expected_prev )
		&& ((incrementOut_expected_prev !== last_incrementOut_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port incrementOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", incrementOut_expected_prev);
		$display ("     Real value = %b", incrementOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_incrementOut_exp = incrementOut_expected_prev;
	end
	if (
		( irOutput_expected_prev[0] !== 1'bx ) && ( irOutput_prev[0] !== irOutput_expected_prev[0] )
		&& ((irOutput_expected_prev[0] !== last_irOutput_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port irOutput[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", irOutput_expected_prev);
		$display ("     Real value = %b", irOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_irOutput_exp[0] = irOutput_expected_prev[0];
	end
	if (
		( irOutput_expected_prev[1] !== 1'bx ) && ( irOutput_prev[1] !== irOutput_expected_prev[1] )
		&& ((irOutput_expected_prev[1] !== last_irOutput_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port irOutput[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", irOutput_expected_prev);
		$display ("     Real value = %b", irOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_irOutput_exp[1] = irOutput_expected_prev[1];
	end
	if (
		( irOutput_expected_prev[2] !== 1'bx ) && ( irOutput_prev[2] !== irOutput_expected_prev[2] )
		&& ((irOutput_expected_prev[2] !== last_irOutput_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port irOutput[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", irOutput_expected_prev);
		$display ("     Real value = %b", irOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_irOutput_exp[2] = irOutput_expected_prev[2];
	end
	if (
		( irOutput_expected_prev[3] !== 1'bx ) && ( irOutput_prev[3] !== irOutput_expected_prev[3] )
		&& ((irOutput_expected_prev[3] !== last_irOutput_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port irOutput[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", irOutput_expected_prev);
		$display ("     Real value = %b", irOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_irOutput_exp[3] = irOutput_expected_prev[3];
	end
	if (
		( irOutput_expected_prev[4] !== 1'bx ) && ( irOutput_prev[4] !== irOutput_expected_prev[4] )
		&& ((irOutput_expected_prev[4] !== last_irOutput_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port irOutput[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", irOutput_expected_prev);
		$display ("     Real value = %b", irOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_irOutput_exp[4] = irOutput_expected_prev[4];
	end
	if (
		( irOutput_expected_prev[5] !== 1'bx ) && ( irOutput_prev[5] !== irOutput_expected_prev[5] )
		&& ((irOutput_expected_prev[5] !== last_irOutput_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port irOutput[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", irOutput_expected_prev);
		$display ("     Real value = %b", irOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_irOutput_exp[5] = irOutput_expected_prev[5];
	end
	if (
		( irOutput_expected_prev[6] !== 1'bx ) && ( irOutput_prev[6] !== irOutput_expected_prev[6] )
		&& ((irOutput_expected_prev[6] !== last_irOutput_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port irOutput[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", irOutput_expected_prev);
		$display ("     Real value = %b", irOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_irOutput_exp[6] = irOutput_expected_prev[6];
	end
	if (
		( irOutput_expected_prev[7] !== 1'bx ) && ( irOutput_prev[7] !== irOutput_expected_prev[7] )
		&& ((irOutput_expected_prev[7] !== last_irOutput_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port irOutput[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", irOutput_expected_prev);
		$display ("     Real value = %b", irOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_irOutput_exp[7] = irOutput_expected_prev[7];
	end
	if (
		( marOut_expected_prev[0] !== 1'bx ) && ( marOut_prev[0] !== marOut_expected_prev[0] )
		&& ((marOut_expected_prev[0] !== last_marOut_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port marOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", marOut_expected_prev);
		$display ("     Real value = %b", marOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_marOut_exp[0] = marOut_expected_prev[0];
	end
	if (
		( marOut_expected_prev[1] !== 1'bx ) && ( marOut_prev[1] !== marOut_expected_prev[1] )
		&& ((marOut_expected_prev[1] !== last_marOut_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port marOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", marOut_expected_prev);
		$display ("     Real value = %b", marOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_marOut_exp[1] = marOut_expected_prev[1];
	end
	if (
		( marOut_expected_prev[2] !== 1'bx ) && ( marOut_prev[2] !== marOut_expected_prev[2] )
		&& ((marOut_expected_prev[2] !== last_marOut_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port marOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", marOut_expected_prev);
		$display ("     Real value = %b", marOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_marOut_exp[2] = marOut_expected_prev[2];
	end
	if (
		( marOut_expected_prev[3] !== 1'bx ) && ( marOut_prev[3] !== marOut_expected_prev[3] )
		&& ((marOut_expected_prev[3] !== last_marOut_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port marOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", marOut_expected_prev);
		$display ("     Real value = %b", marOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_marOut_exp[3] = marOut_expected_prev[3];
	end
	if (
		( marOut_expected_prev[4] !== 1'bx ) && ( marOut_prev[4] !== marOut_expected_prev[4] )
		&& ((marOut_expected_prev[4] !== last_marOut_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port marOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", marOut_expected_prev);
		$display ("     Real value = %b", marOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_marOut_exp[4] = marOut_expected_prev[4];
	end
	if (
		( marOut_expected_prev[5] !== 1'bx ) && ( marOut_prev[5] !== marOut_expected_prev[5] )
		&& ((marOut_expected_prev[5] !== last_marOut_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port marOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", marOut_expected_prev);
		$display ("     Real value = %b", marOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_marOut_exp[5] = marOut_expected_prev[5];
	end
	if (
		( marOut_expected_prev[6] !== 1'bx ) && ( marOut_prev[6] !== marOut_expected_prev[6] )
		&& ((marOut_expected_prev[6] !== last_marOut_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port marOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", marOut_expected_prev);
		$display ("     Real value = %b", marOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_marOut_exp[6] = marOut_expected_prev[6];
	end
	if (
		( marOut_expected_prev[7] !== 1'bx ) && ( marOut_prev[7] !== marOut_expected_prev[7] )
		&& ((marOut_expected_prev[7] !== last_marOut_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port marOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", marOut_expected_prev);
		$display ("     Real value = %b", marOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_marOut_exp[7] = marOut_expected_prev[7];
	end
	if (
		( mdriOutput_expected_prev[0] !== 1'bx ) && ( mdriOutput_prev[0] !== mdriOutput_expected_prev[0] )
		&& ((mdriOutput_expected_prev[0] !== last_mdriOutput_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdriOutput[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdriOutput_expected_prev);
		$display ("     Real value = %b", mdriOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mdriOutput_exp[0] = mdriOutput_expected_prev[0];
	end
	if (
		( mdriOutput_expected_prev[1] !== 1'bx ) && ( mdriOutput_prev[1] !== mdriOutput_expected_prev[1] )
		&& ((mdriOutput_expected_prev[1] !== last_mdriOutput_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdriOutput[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdriOutput_expected_prev);
		$display ("     Real value = %b", mdriOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mdriOutput_exp[1] = mdriOutput_expected_prev[1];
	end
	if (
		( mdriOutput_expected_prev[2] !== 1'bx ) && ( mdriOutput_prev[2] !== mdriOutput_expected_prev[2] )
		&& ((mdriOutput_expected_prev[2] !== last_mdriOutput_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdriOutput[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdriOutput_expected_prev);
		$display ("     Real value = %b", mdriOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mdriOutput_exp[2] = mdriOutput_expected_prev[2];
	end
	if (
		( mdriOutput_expected_prev[3] !== 1'bx ) && ( mdriOutput_prev[3] !== mdriOutput_expected_prev[3] )
		&& ((mdriOutput_expected_prev[3] !== last_mdriOutput_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdriOutput[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdriOutput_expected_prev);
		$display ("     Real value = %b", mdriOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mdriOutput_exp[3] = mdriOutput_expected_prev[3];
	end
	if (
		( mdriOutput_expected_prev[4] !== 1'bx ) && ( mdriOutput_prev[4] !== mdriOutput_expected_prev[4] )
		&& ((mdriOutput_expected_prev[4] !== last_mdriOutput_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdriOutput[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdriOutput_expected_prev);
		$display ("     Real value = %b", mdriOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mdriOutput_exp[4] = mdriOutput_expected_prev[4];
	end
	if (
		( mdriOutput_expected_prev[5] !== 1'bx ) && ( mdriOutput_prev[5] !== mdriOutput_expected_prev[5] )
		&& ((mdriOutput_expected_prev[5] !== last_mdriOutput_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdriOutput[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdriOutput_expected_prev);
		$display ("     Real value = %b", mdriOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mdriOutput_exp[5] = mdriOutput_expected_prev[5];
	end
	if (
		( mdriOutput_expected_prev[6] !== 1'bx ) && ( mdriOutput_prev[6] !== mdriOutput_expected_prev[6] )
		&& ((mdriOutput_expected_prev[6] !== last_mdriOutput_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdriOutput[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdriOutput_expected_prev);
		$display ("     Real value = %b", mdriOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mdriOutput_exp[6] = mdriOutput_expected_prev[6];
	end
	if (
		( mdriOutput_expected_prev[7] !== 1'bx ) && ( mdriOutput_prev[7] !== mdriOutput_expected_prev[7] )
		&& ((mdriOutput_expected_prev[7] !== last_mdriOutput_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdriOutput[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdriOutput_expected_prev);
		$display ("     Real value = %b", mdriOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mdriOutput_exp[7] = mdriOutput_expected_prev[7];
	end
	if (
		( mdroOutput_expected_prev[0] !== 1'bx ) && ( mdroOutput_prev[0] !== mdroOutput_expected_prev[0] )
		&& ((mdroOutput_expected_prev[0] !== last_mdroOutput_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdroOutput[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdroOutput_expected_prev);
		$display ("     Real value = %b", mdroOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mdroOutput_exp[0] = mdroOutput_expected_prev[0];
	end
	if (
		( mdroOutput_expected_prev[1] !== 1'bx ) && ( mdroOutput_prev[1] !== mdroOutput_expected_prev[1] )
		&& ((mdroOutput_expected_prev[1] !== last_mdroOutput_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdroOutput[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdroOutput_expected_prev);
		$display ("     Real value = %b", mdroOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mdroOutput_exp[1] = mdroOutput_expected_prev[1];
	end
	if (
		( mdroOutput_expected_prev[2] !== 1'bx ) && ( mdroOutput_prev[2] !== mdroOutput_expected_prev[2] )
		&& ((mdroOutput_expected_prev[2] !== last_mdroOutput_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdroOutput[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdroOutput_expected_prev);
		$display ("     Real value = %b", mdroOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mdroOutput_exp[2] = mdroOutput_expected_prev[2];
	end
	if (
		( mdroOutput_expected_prev[3] !== 1'bx ) && ( mdroOutput_prev[3] !== mdroOutput_expected_prev[3] )
		&& ((mdroOutput_expected_prev[3] !== last_mdroOutput_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdroOutput[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdroOutput_expected_prev);
		$display ("     Real value = %b", mdroOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mdroOutput_exp[3] = mdroOutput_expected_prev[3];
	end
	if (
		( mdroOutput_expected_prev[4] !== 1'bx ) && ( mdroOutput_prev[4] !== mdroOutput_expected_prev[4] )
		&& ((mdroOutput_expected_prev[4] !== last_mdroOutput_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdroOutput[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdroOutput_expected_prev);
		$display ("     Real value = %b", mdroOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mdroOutput_exp[4] = mdroOutput_expected_prev[4];
	end
	if (
		( mdroOutput_expected_prev[5] !== 1'bx ) && ( mdroOutput_prev[5] !== mdroOutput_expected_prev[5] )
		&& ((mdroOutput_expected_prev[5] !== last_mdroOutput_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdroOutput[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdroOutput_expected_prev);
		$display ("     Real value = %b", mdroOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mdroOutput_exp[5] = mdroOutput_expected_prev[5];
	end
	if (
		( mdroOutput_expected_prev[6] !== 1'bx ) && ( mdroOutput_prev[6] !== mdroOutput_expected_prev[6] )
		&& ((mdroOutput_expected_prev[6] !== last_mdroOutput_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdroOutput[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdroOutput_expected_prev);
		$display ("     Real value = %b", mdroOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mdroOutput_exp[6] = mdroOutput_expected_prev[6];
	end
	if (
		( mdroOutput_expected_prev[7] !== 1'bx ) && ( mdroOutput_prev[7] !== mdroOutput_expected_prev[7] )
		&& ((mdroOutput_expected_prev[7] !== last_mdroOutput_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mdroOutput[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mdroOutput_expected_prev);
		$display ("     Real value = %b", mdroOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_mdroOutput_exp[7] = mdroOutput_expected_prev[7];
	end
	if (
		( pcOut_expected_prev[0] !== 1'bx ) && ( pcOut_prev[0] !== pcOut_expected_prev[0] )
		&& ((pcOut_expected_prev[0] !== last_pcOut_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcOut_exp[0] = pcOut_expected_prev[0];
	end
	if (
		( pcOut_expected_prev[1] !== 1'bx ) && ( pcOut_prev[1] !== pcOut_expected_prev[1] )
		&& ((pcOut_expected_prev[1] !== last_pcOut_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcOut_exp[1] = pcOut_expected_prev[1];
	end
	if (
		( pcOut_expected_prev[2] !== 1'bx ) && ( pcOut_prev[2] !== pcOut_expected_prev[2] )
		&& ((pcOut_expected_prev[2] !== last_pcOut_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcOut_exp[2] = pcOut_expected_prev[2];
	end
	if (
		( pcOut_expected_prev[3] !== 1'bx ) && ( pcOut_prev[3] !== pcOut_expected_prev[3] )
		&& ((pcOut_expected_prev[3] !== last_pcOut_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcOut_exp[3] = pcOut_expected_prev[3];
	end
	if (
		( pcOut_expected_prev[4] !== 1'bx ) && ( pcOut_prev[4] !== pcOut_expected_prev[4] )
		&& ((pcOut_expected_prev[4] !== last_pcOut_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcOut_exp[4] = pcOut_expected_prev[4];
	end
	if (
		( pcOut_expected_prev[5] !== 1'bx ) && ( pcOut_prev[5] !== pcOut_expected_prev[5] )
		&& ((pcOut_expected_prev[5] !== last_pcOut_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcOut_exp[5] = pcOut_expected_prev[5];
	end
	if (
		( pcOut_expected_prev[6] !== 1'bx ) && ( pcOut_prev[6] !== pcOut_expected_prev[6] )
		&& ((pcOut_expected_prev[6] !== last_pcOut_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcOut_exp[6] = pcOut_expected_prev[6];
	end
	if (
		( pcOut_expected_prev[7] !== 1'bx ) && ( pcOut_prev[7] !== pcOut_expected_prev[7] )
		&& ((pcOut_expected_prev[7] !== last_pcOut_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcOut_exp[7] = pcOut_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SimpleCPU_Template_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [7:0] aOut;
wire incrementOut;
wire [7:0] irOutput;
wire [7:0] marOut;
wire [7:0] mdriOutput;
wire [7:0] mdroOutput;
wire [7:0] pcOut;

wire sampler;                             

// assign statements (if any)                          
SimpleCPU_Template i1 (
// port map - connection between master ports and signals/registers   
	.aOut(aOut),
	.clk(clk),
	.incrementOut(incrementOut),
	.irOutput(irOutput),
	.marOut(marOut),
	.mdriOutput(mdriOutput),
	.mdroOutput(mdroOutput),
	.pcOut(pcOut)
);

// clk
always
begin
	clk = 1'b0;
	clk = #100000 1'b1;
	#100000;
end 

SimpleCPU_Template_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

SimpleCPU_Template_vlg_check_tst tb_out(
	.aOut(aOut),
	.incrementOut(incrementOut),
	.irOutput(irOutput),
	.marOut(marOut),
	.mdriOutput(mdriOutput),
	.mdroOutput(mdroOutput),
	.pcOut(pcOut),
	.sampler_rx(sampler)
);
endmodule

